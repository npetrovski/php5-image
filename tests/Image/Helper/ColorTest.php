<?php
namespace Image\Helper;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-30 at 10:59:58.
 */
class ColorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Color
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Color;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     * @covers Image\Helper\Color::arrayColorToHexColor
     */
    public function testArrayColorToHexColor()
    {
        $this->assertEquals('ff00ff', $this->object->arrayColorToHexColor(array('red' => 255, 'green' => 0, 'blue' => 255, 'alpha' => 0)));
    }

    /**
     * @covers Image\Helper\Color::intColorToHexColor
     */
    public function testIntColorToHexColor()
    {
        $this->assertEquals('ff00ff', $this->object->intColorToHexColor(16711935));
    }

    /**
     * @covers Image\Helper\Color::hexColorToIntColor
     */
    public function testHexColorToIntColor()
    {
        $this->assertEquals(16711935, $this->object->hexColorToIntColor('ff00ff'));
    }

    /**
     * @covers Image\Helper\Color::intColorToArrayColor
     */
    public function testIntColorToArrayColor()
    {
        $this->assertEquals(array('red' => 255, 'green' => 0, 'blue' => 255, 'alpha' => 0), $this->object->intColorToArrayColor(16711935));
    }

    /**
     * @covers Image\Helper\Color::hexColorToArrayColor
     */
    public function testHexColorToArrayColor()
    {
        $this->assertEquals(array('red' => 255, 'green' => 0, 'blue' => 255, 'alpha' => 0), $this->object->hexColorToArrayColor('ff00ff'));
    }

    /**
     * @covers Image\Helper\Color::arrayColorToIntColor
     */
    public function testArrayColorToIntColor()
    {
        $this->assertEquals(16711935, $this->object->arrayColorToIntColor(array('red' => 255, 'green' => 0, 'blue' => 255, 'alpha' => 0)));
    }

    /**
     * @covers Image\Helper\Color::arrayColorToXyz
     */
    public function testArrayColorToXyz()
    {
        $this->assertEquals(array('x' => 0, 'y' => 0, 'z' => 0), $this->object->arrayColorToXyz(array('red' => 0, 'green' => 0, 'blue' => 0, 'alpha' => 0)));
    }

    /**
     * @covers Image\Helper\Color::arrayColorToLabCie
     */
    public function testArrayColorToLabCie()
    {
        $this->assertEquals(array('l' => .0, 'a' => .0, 'b' => .0), $this->object->arrayColorToLabCie(array('red' => 0, 'green' => 0, 'blue' => 0, 'alpha' => 0)));
    }

    /**
     * @covers Image\Helper\Color::arrayColorToHsvInt
     */
    public function testArrayColorToHsvInt()
    {
        $this->assertEquals(array('hue' => 0, 'sat' => 0, 'val' => 0), $this->object->arrayColorToHsvInt(array('red' => 0, 'green' => 0, 'blue' => 0, 'alpha' => 0)));
    }

    /**
     * @covers Image\Helper\Color::differs
     */
    public function testDiffers()
    {
        $color1 = array('red' => 127, 'green' => 255, 'blue' => 0, 'alpha' => 0);
        $color2 = array('red' => 255, 'green' => 0, 'blue' => 127, 'alpha' => 50);
        $this->assertTrue($this->object->differs($color1, $color2));
        $this->assertFalse($this->object->differs($color1, $color1));
    }
}
