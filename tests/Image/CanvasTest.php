<?php

namespace Image;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-30 at 11:00:36.
 */
class CanvasTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Canvas
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Canvas;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        unset($this->object);
    }

    /**
     * @covers Image\Canvas::__call
     */
    public function test__call() {
        $this->object->createImage(100, 100);
        $this->object->attach(new Draw\Border(10));
        $this->assertTrue($this->object->generate());
    }

    /**
     * @covers Image\Canvas::attach
     */
    public function testAttach() {
        $this->object->attach(new Helper\Analyser());

        $this->assertNotEmpty($this->object->openImage(dirname(__FILE__) . '/../image.png')); //32 bit PNG image
        $this->assertNotEmpty($this->object->apply());
    }

    /**
     * @covers Image\Canvas::fx
     */
    public function testFx() {
        $this->assertNotEmpty($this->object->attach(new Fx\Resize(50)));
        $this->assertNotEmpty($this->object->attach(new Fx\Crop(50)));
    }

    /**
     * @covers Image\Canvas::draw
     */
    public function testDraw() {
        $this->assertNotEmpty($this->object->attach(new Draw\Border(5)));
        $this->assertNotEmpty($this->object->attach(new Draw\Scanline(4)));
    }

    /**
     * @covers Image\Canvas::helper
     */
    public function testHelper() {
        $this->assertNotEmpty($this->object->attach(new Helper\Analyser));
    }

    /**
     * @covers Image\Canvas::apply
     */
    public function testApply() {
        $this->object->createImage(100, 100);
        $this->object->attach(new Draw\Border(10));
        $this->assertInstanceOf(get_class($this->object), $this->object->apply());
    }

    /**
     * @covers Image\Canvas::createImage
     */
    public function testCreateImage() {
        $this->assertInstanceOf(get_class($this->object), $this->object->createImage(100, 100));
    }

    /**
     * @covers Image\Canvas::createImageTrueColor
     */
    public function testCreateImageTrueColor() {
        $this->assertInstanceOf(get_class($this->object), $this->object->createImageTrueColor(100, 100, 'cccccc'));
    }

    /**
     * @covers Image\Canvas::createImageTrueColorTransparent
     */
    public function testCreateImageTrueColorTransparent() {
        $this->assertInstanceOf(get_class($this->object), $this->object->createImageTrueColorTransparent(100, 100));
    }

    /**
     * @covers Image\Canvas::openImage
     */
    public function testOpenImage() {
        $this->object->openImage(dirname(__FILE__) . '/../image.png');

        $this->assertTrue((isset($this->object->image) && 'gd' == get_resource_type($this->object->image)));
    }

    /**
     * @expectedException Image\Exception
     * expectedExceptionMessage Image file does not exist
     */
    public function testOpenImageNotExists() {
        $this->object->openImage("notexists.png");
    }

    /**
     * @expectedException Image\Exception
     * expectedExceptionMessage File is not an image
     */
    public function testOpenImageWrongType() {
        $this->object->openImage(__FILE__);
    }

    /**
     * @covers Image\Canvas::printImage
     */
    public function testPrintImage() {
        $this->object->createImageTrueColorTransparent(100, 100);
        //$this->assertInstanceOf('resource', $this->object->printImage('png'));
    }

    /**
     * @expectedException Image\Exception
     * @covers Image\Canvas::printImage
     */
    public function testPrintImageInvalidType() {
        $this->object->createImageTrueColorTransparent(100, 100);
        $this->assertInstanceOf('resource', $this->object->printImage('invalid'));
    }

    /**
     * @covers Image\Canvas::imagePng
     */
    public function testImagePng() {
        $this->object->createImageTrueColor(100, 100, 'cccccc');

        //$this->assertInstanceOf('resource', $this->object->imagePng());
    }

    /**
     * @covers Image\Canvas::imageJpeg
     */
    public function testImageJpeg() {

        $this->object->createImageTrueColor(100, 100, 'cccccc');

        //$this->assertInstanceOf('resource', $this->object->imageJpeg());
    }

    /**
     * @covers Image\Canvas::imageWbmp
     */
    public function testImageWbmp() {

        $this->object->createImageTrueColor(100, 100, 'cccccc');

        //$this->assertInstanceOf('resource', $this->object->imageWbmp());
    }

    /**
     * @covers Image\Canvas::imageGif
     */
    public function testImageGif() {
        
        $this->object->createImageTrueColor(100, 100, 'cccccc');

        //$this->assertInstanceOf('resource', $this->object->imageGif());
    }

    /**
     * @covers Image\Canvas::destroyImage
     */
    public function testDestroyImage() {
        $this->object->createImage(100, 100);

        $this->object->destroyImage();
        $this->assertTrue(!isset($this->object->image));
    }

    /**
     * @covers Image\Canvas::getImageWidth
     */
    public function testGetImageWidth() {
        
        $this->object->createImageTrueColor(100, 150, 'cccccc');
        
        $this->assertEquals(100, $this->object->getImageWidth());
    }

    /**
     * @covers Image\Canvas::getImageHeight
     */
    public function testGetImageHeight() {
        $this->object->createImageTrueColor(100, 150, 'cccccc');
        
        $this->assertEquals(150, $this->object->getImageHeight());
    }

    /**
     * @covers Image\Canvas::imageIsTrueColor
     */
    public function testImageIsTrueColor() {
        $this->assertNotEmpty($this->object->openImage(dirname(__FILE__) . '/../image.gif'));
        $this->assertEquals($this->object->imageIsTrueColor(), false);

        $this->assertNotEmpty($this->object->openImage(dirname(__FILE__) . '/../image.jpg'));
        $this->assertEquals($this->object->imageIsTrueColor(), true);
    }

    /**
     * @covers Image\Canvas::imageColorAt
     */
    public function testImageColorAt() {
        $this->assertNotEmpty($this->object->openImage(dirname(__FILE__) . '/../image.gif')); //8 bit GIF image
        $this->assertEquals($this->object->imageColorAt(3, 3), 255); //Solid blue


        $this->assertNotEmpty($this->object->openImage(dirname(__FILE__) . '/../image.png')); //32 bit PNG image
        $this->assertEquals($this->object->imageColorAt(3, 3), 255); //Solid blue
    }

    /**
     * @covers Image\Canvas::imagefill
     */
    public function testImagefill() {
        $this->object->createImageTrueColor(100, 150, 'cccccc');
        
        $this->assertInstanceOf(get_class($this->object), $this->object->imagefill(0, 0, 'dddddd'));
    }

    /**
     * @covers Image\Canvas::imagecolorallocate
     */
    public function testImagecolorallocate() {
        $this->object->createImageTrueColor(100, 100);
        
        $this->assertEquals(14540253, $this->object->imagecolorallocate('dddddd'));
    }

    /**
     * @covers Image\Canvas::displace
     */
    public function testDisplace() {
        $this->object->createImageTrueColor(100, 100);
        
        $this->assertInstanceOf(get_class($this->object), $this->object->displace(array(
            'x' => array(array(1)), 
            'y' => array(array(1))
        )));
    }

    /**
     * @covers Image\Canvas::getHandleX
     */
    public function testGetHandleX() {
        $this->object->mid_handle = true;
        $this->object->createImageTrueColor(100, 100);
        
        $this->assertEquals(50, $this->object->getHandleX());
        
        $this->object->mid_handle = false;
        
        $this->assertEquals(0, $this->object->getHandleX());
    }

    /**
     * @covers Image\Canvas::getHandleY
     */
    public function testGetHandleY() {
        $this->object->mid_handle = true;
        $this->object->createImageTrueColor(100, 100);
        
        $this->assertEquals(50, $this->object->getHandleY());
                
        $this->object->mid_handle = false;
        
        $this->assertEquals(0, $this->object->getHandleY());
    }

    /**
     * @covers Image\Canvas::getProperty
     */
    public function testGetProperty() {
        
        $this->object->openImage(dirname(__FILE__) . '/../image.png');
        
        $this->assertEquals('image.png', $this->object->getProperty('filename'));
    }

    /**
     * @covers Image\Canvas::__clone
     */
    public function test__clone() {
        $this->object->createImage(200, 200);

        $clone = clone $this->object;

        $this->assertEquals($this->object->getImageWidth(), $clone->getImageWidth());
        $this->assertEquals($this->object->getImageHeight(), $clone->getImageHeight());
    }

}
